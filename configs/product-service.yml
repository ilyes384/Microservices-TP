spring:
  application:
    name: product-microservice # Nom de l'application pour identification dans Eureka
  cloud:
    loadbalancer:
      hint:
        user-microservice:
          instances: localhost:8082
    config:
      uri: http://localhost:8888 # Adresse de votre Config Server
      import: "optional:configserver:" # Utilisation correcte de configserver avec optional pour éviter l'erreur
      import-check:
        enabled: false # Désactiver la vérification de l'importation de configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/ # Adresse de votre Eureka Server
management:
  tracing:
    sampling:
      probability: 1.0 # Taux d'échantillonnage pour la traçabilité (1.0 signifie que toutes les requêtes seront tracées)
  zipkin:
    endpoint: http://localhost:9411/api/v2/spans # URL du serveur Zipkin pour collecter et visualiser les traces
  endpoints:
    web:
      exposure:
        include: info, health, prometheus
  endpoint:
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
resilience4j:
  retry:
    instances:
      myRetry:
        max-attempts: 3  # Maximum number of retry attempts
        wait-duration: 500ms  # Wait duration between attempts
  rate-limiter:
    instances:
      myRateLimiter:
        limit-for-period: 5  # Number of requests per period
        limit-refresh-period: 1s  # Refresh period for rate limit
        timeout-duration: 500ms  # Timeout duration for requests
ribbon:
  eureka:
    enabled: false
  ListOfServers: localhost:8081,localhost:8082